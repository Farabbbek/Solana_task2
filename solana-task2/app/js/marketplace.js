// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–º
class MarketplaceManager {
  constructor() {
    this.listings = [];
    this.myListings = [];
    this.selectedNFTForSale = null;
    this.init();
  }

  init() {
    this.loadMarketplaceData();
    this.setupEventListeners();
  }

  setupEventListeners() {
    document
      .getElementById("rarity-filter")
      ?.addEventListener("change", () => this.applyFilters());
    document
      .getElementById("sort-filter")
      ?.addEventListener("change", () => this.applyFilters());
    document
      .getElementById("min-price")
      ?.addEventListener("input", () => this.debounceFilter());
    document
      .getElementById("max-price")
      ?.addEventListener("input", () => this.debounceFilter());
  }

  debounceFilter() {
    clearTimeout(this.filterTimeout);
    this.filterTimeout = setTimeout(() => this.applyFilters(), 500);
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
  loadMarketplaceData() {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
    this.generateDemoListings();
    this.renderListings();
    this.updateMarketplaceStats();
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ-–ª–æ—Ç–æ–≤
  generateDemoListings() {
    const artists = [
      "CyberBeats",
      "NeonWave",
      "DigitalSoul",
      "ElectroMind",
      "SynthLord",
    ];
    const genres = ["Synthwave", "Cyberpunk", "Ambient", "Techno", "House"];
    const rarities = ["Common", "Rare", "Epic", "Legendary", "Mythic"];

    this.listings = [];

    for (let i = 0; i < 20; i++) {
      const rarity = rarities[Math.floor(Math.random() * rarities.length)];
      const config = rarityManager.getRarityConfig(rarity);
      const basePrice = 0.01 * config.multiplier;
      const price = basePrice + Math.random() * basePrice * 2;

      this.listings.push({
        id: i + 1,
        name: `Track ${i + 1}`,
        artist: artists[Math.floor(Math.random() * artists.length)],
        genre: genres[Math.floor(Math.random() * genres.length)],
        rarity: rarity,
        price: price,
        seller: this.generateAddress(),
        listedAt: Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000, // Last 7 days
        serialNumber: Math.floor(Math.random() * 10000) + 1,
        duration: Math.floor(Math.random() * 300) + 60,
        attributes: rarityManager.generateAttributes(rarity),
      });
    }
  }

  generateAddress() {
    const chars = "ABCDEFGHJKMNPQRSTUVWXYZabcdefghjkmnpqrstuvwxyz123456789";
    let result = "";
    for (let i = 0; i < 44; i++) {
      result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return result;
  }

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ª–æ—Ç–æ–≤
  applyFilters() {
    const rarityFilter = document.getElementById("rarity-filter")?.value;
    const sortFilter = document.getElementById("sort-filter")?.value;
    const minPrice =
      parseFloat(document.getElementById("min-price")?.value) || 0;
    const maxPrice =
      parseFloat(document.getElementById("max-price")?.value) || Infinity;

    let filteredListings = [...this.listings];

    // –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
    if (rarityFilter) {
      filteredListings = filteredListings.filter(
        (nft) => nft.rarity === rarityFilter
      );
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ
    filteredListings = filteredListings.filter(
      (nft) => nft.price >= minPrice && nft.price <= maxPrice
    );

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    switch (sortFilter) {
      case "price-low":
        filteredListings.sort((a, b) => a.price - b.price);
        break;
      case "price-high":
        filteredListings.sort((a, b) => b.price - a.price);
        break;
      case "rarity":
        const rarityOrder = ["Mythic", "Legendary", "Epic", "Rare", "Common"];
        filteredListings.sort(
          (a, b) =>
            rarityOrder.indexOf(a.rarity) - rarityOrder.indexOf(b.rarity)
        );
        break;
      case "newest":
        filteredListings.sort((a, b) => b.listedAt - a.listedAt);
        break;
    }

    this.renderListings(filteredListings);
  }

  // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ—Ç–æ–≤
  renderListings(listings = this.listings) {
    const grid = document.getElementById("marketplace-grid");
    if (!grid) return;

    if (listings.length === 0) {
      grid.innerHTML = `
                <div class="no-listings">
                    <i class="fas fa-search"></i>
                    <h3>–ù–µ—Ç –ª–æ—Ç–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º</h3>
                    <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞</p>
                </div>
            `;
      return;
    }

    grid.innerHTML = listings
      .map((nft) => {
        const config = rarityManager.getRarityConfig(nft.rarity);
        return `
                <div class="nft-card marketplace-card rarity-${nft.rarity.toLowerCase()}" 
                     onclick="showBuyModal(${nft.id})">
                    <div class="nft-image">
                        <i class="fas fa-music"></i>
                    </div>
                    <div class="nft-info">
                        <h4>${nft.name}</h4>
                        <p class="artist">${nft.artist}</p>
                        <div class="nft-rarity-info">
                            <span class="rarity-badge" style="background: ${
                              config.color
                            }">
                                ${config.name}
                            </span>
                            <span class="serial">#${nft.serialNumber}</span>
                        </div>
                        <div class="nft-meta">
                            <span class="genre">${nft.genre}</span>
                            <span class="duration">${utils.formatDuration(
                              nft.duration
                            )}</span>
                        </div>
                        <div class="price-info">
                            <div class="current-price">
                                üíé ${nft.price.toFixed(3)} SOL
                            </div>
                            <div class="seller-info">
                                –ü—Ä–æ–¥–∞–≤–µ—Ü: ${utils.shortenAddress(nft.seller)}
                            </div>
                        </div>
                    </div>
                </div>
            `;
      })
      .join("");

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—é —Ä–µ–¥–∫–æ—Å—Ç–∏
    grid.querySelectorAll(".nft-card").forEach((card, index) => {
      rarityManager.styleNFTCard(card, listings[index].rarity);
    });
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
  updateMarketplaceStats() {
    const totalListings = this.listings.length;
    const floorPrice = Math.min(...this.listings.map((nft) => nft.price));
    const volume24h = this.calculateVolume24h();

    document.getElementById("total-listings").textContent = totalListings;
    document.getElementById("floor-price").textContent = floorPrice.toFixed(3);
    document.getElementById("volume-24h").textContent = volume24h.toFixed(3);
  }

  calculateVolume24h() {
    return Math.random() * 50 + 10;
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–∫—É–ø–∫–∏
  showBuyModal(nftId) {
    const nft = this.listings.find((item) => item.id === nftId);
    if (!nft) return;

    const modal = document.getElementById("buy-modal");
    const preview = document.getElementById("buy-nft-preview");
    const price = document.getElementById("buy-price");
    const seller = document.getElementById("buy-seller");

    const config = rarityManager.getRarityConfig(nft.rarity);

    preview.innerHTML = `
            <div class="nft-card rarity-${nft.rarity.toLowerCase()}">
                <div class="nft-image">
                    <i class="fas fa-music"></i>
                </div>
                <div class="nft-info">
                    <h4>${nft.name}</h4>
                    <p>${nft.artist}</p>
                    <div class="rarity-badge" style="background: ${
                      config.color
                    }">
                        ${config.name}
                    </div>
                </div>
            </div>
        `;

    price.textContent = `${nft.price.toFixed(3)} SOL`;
    seller.textContent = utils.shortenAddress(nft.seller);

    this.selectedNFTForPurchase = nft;
    modal.style.display = "flex";

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—é
    setTimeout(() => {
      const card = preview.querySelector(".nft-card");
      rarityManager.styleNFTCard(card, nft.rarity);
    }, 100);
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ–¥–∞–∂–∏
  showSellModal() {
    if (!walletManager?.isConnected) {
      utils.showNotification("–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ NFT", "error");
      return;
    }

    const modal = document.getElementById("sell-modal");
    const myNFTsGrid = document.getElementById("my-nfts-grid");

    // –ó–∞–≥—Ä—É–∂–∞–µ–º NFT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userCollection = packManager.getUserCollection();

    if (userCollection.length === 0) {
      myNFTsGrid.innerHTML = `
                <div class="no-nfts">
                    <p>–£ –≤–∞—Å –Ω–µ—Ç NFT –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏</p>
                    <a href="packs.html" class="btn btn-primary">–ö—É–ø–∏—Ç—å –ø–∞–∫–∏</a>
                </div>
            `;
    } else {
      myNFTsGrid.innerHTML = userCollection
        .map((nft, index) => {
          const config = rarityManager.getRarityConfig(nft.rarity);
          return `
                    <div class="mini-nft-card ${
                      this.selectedNFTForSale?.id === index ? "selected" : ""
                    }" 
                         onclick="selectNFTForSale(${index})">
                        <div class="mini-nft-image">
                            <i class="fas fa-music"></i>
                        </div>
                        <div class="mini-nft-info">
                            <h5>${nft.name}</h5>
                            <span class="mini-rarity" style="color: ${
                              config.color
                            }">
                                ${config.name}
                            </span>
                        </div>
                    </div>
                `;
        })
        .join("");
    }

    modal.style.display = "flex";
  }

  // –í—ã–±–æ—Ä NFT –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
  selectNFTForSale(index) {
    // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
    document.querySelectorAll(".mini-nft-card").forEach((card) => {
      card.classList.remove("selected");
    });

    // –í—ã–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π
    const card = document.querySelector(
      `.mini-nft-card:nth-child(${index + 1})`
    );
    card?.classList.add("selected");

    const userCollection = packManager.getUserCollection();
    this.selectedNFTForSale = { ...userCollection[index], id: index };
  }

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
  async confirmPurchase() {
    if (!this.selectedNFTForPurchase) return;
    if (!walletManager?.isConnected) {
      utils.showNotification("–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫", "error");
      return;
    }

    try {
      // –ó–¥–µ—Å—å –±—ã –±—ã–ª–∞ —Ä–µ–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏
      utils.showNotification(
        `NFT "${this.selectedNFTForPurchase.name}" —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω!`,
        "success"
      );

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userCollection = packManager.getUserCollection();
      userCollection.push(this.selectedNFTForPurchase);
      localStorage.setItem("userNFTCollection", JSON.stringify(userCollection));

      // –£–¥–∞–ª—è–µ–º –∏–∑ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞
      this.listings = this.listings.filter(
        (nft) => nft.id !== this.selectedNFTForPurchase.id
      );
      this.renderListings();
      this.updateMarketplaceStats();

      this.closeBuyModal();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏:", error);
      utils.showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ NFT", "error");
    }
  }

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
  async confirmListing() {
    if (!this.selectedNFTForSale) {
      utils.showNotification("–í—ã–±–µ—Ä–∏—Ç–µ NFT –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏", "error");
      return;
    }

    const price = parseFloat(document.getElementById("sell-price").value);
    if (!price || price <= 0) {
      utils.showNotification("–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É", "error");
      return;
    }

    try {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–æ—Ç
      const newListing = {
        ...this.selectedNFTForSale,
        id: this.listings.length + 1,
        price: price,
        seller: walletManager.getPublicKey().toString(),
        listedAt: Date.now(),
      };

      this.listings.push(newListing);

      // –£–¥–∞–ª—è–µ–º –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userCollection = packManager.getUserCollection();
      userCollection.splice(this.selectedNFTForSale.id, 1);
      localStorage.setItem("userNFTCollection", JSON.stringify(userCollection));

      utils.showNotification(
        `NFT –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –∑–∞ ${price} SOL!`,
        "success"
      );

      this.renderListings();
      this.updateMarketplaceStats();
      this.closeSellModal();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –ø—Ä–æ–¥–∞–∂—É:", error);
      utils.showNotification("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É", "error");
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –ª–æ—Ç—ã
  showMyListings() {
    if (!walletManager?.isConnected) {
      utils.showNotification("–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫", "error");
      return;
    }

    const userAddress = walletManager.getPublicKey().toString();
    const myListings = this.listings.filter(
      (nft) => nft.seller === userAddress
    );

    if (myListings.length === 0) {
      utils.showNotification("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤", "info");
      return;
    }

    this.renderListings(myListings);
    utils.showNotification(`–ü–æ–∫–∞–∑–∞–Ω–æ ${myListings.length} –≤–∞—à–∏—Ö –ª–æ—Ç–æ–≤`, "info");
  }

  closeBuyModal() {
    document.getElementById("buy-modal").style.display = "none";
    this.selectedNFTForPurchase = null;
  }

  closeSellModal() {
    document.getElementById("sell-modal").style.display = "none";
    this.selectedNFTForSale = null;
    document.getElementById("sell-price").value = "";
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
window.showBuyModal = (nftId) => marketplaceManager.showBuyModal(nftId);
window.showSellModal = () => marketplaceManager.showSellModal();
window.selectNFTForSale = (index) => marketplaceManager.selectNFTForSale(index);
window.confirmPurchase = () => marketplaceManager.confirmPurchase();
window.confirmListing = () => marketplaceManager.confirmListing();
window.closeBuyModal = () => marketplaceManager.closeBuyModal();
window.closeSellModal = () => marketplaceManager.closeSellModal();
window.showMyListings = () => marketplaceManager.showMyListings();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
let marketplaceManager;
document.addEventListener("DOMContentLoaded", () => {
  marketplaceManager = new MarketplaceManager();
  window.marketplaceManager = marketplaceManager;
});
